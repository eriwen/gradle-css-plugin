buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'com.eriwen:gradle-cobertura-plugin:1.1.1'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:0.3'
    }
}

apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'idea'
apply plugin: 'cobertura'
apply plugin: 'bintray'

sourceCompatibility = 1.6
targetCompatibility = 1.6

defaultTasks 'clean', 'build'

version = '1.11.1'
group = 'com.eriwen'
ext.artifact = 'gradle-css-plugin'
ext.isSnapshot = version.endsWith("-SNAPSHOT")

repositories {
    mavenCentral()
}

dependencies {
    compile localGroovy()
    compile gradleApi()
    compile('com.yahoo.platform.yui:yuicompressor:2.4.7') {
        exclude module: 'junit'
    }
    compile 'com.asual.lesscss:lesscss-engine:1.5.1'
    testCompile ('org.spockframework:spock-core:0.6-groovy-1.8') {
        exclude module: 'junit-dep'
        exclude module: 'groovy-all'
    }
}

idea.module {
    ext.gradleCacheVariable = 'GRADLE_CACHE'
    ext.downloadJavadoc = true
    ext.downloadSource = true
    outputDir = file('intellij/out')
    testOutputDir = file('intellij/testOut')
}

idea.project.ipr.withXml { provider ->
    def node = provider.asNode()
    // Use git
    def vcsConfig = node.component.find { it.'@name' == 'VcsDirectoryMappings' }
    vcsConfig.mapping[0].'@vcs' = 'Git'

    // Set gradle home
    def gradleSettings = node.appendNode('component', [name: 'GradleSettings'])
    gradleSettings.appendNode('option', [name: 'SDK_HOME', value: gradle.gradleHomeDir.absolutePath])

    // Add gradle IDE support
    def gradleUISettings = node.appendNode('component', [name: 'GradleUISettings'])
    gradleUISettings.appendNode('setting', [name: 'root'])

    def gradleUISettings2 = node.appendNode('component', [name: 'GradleUISettings2'])
    gradleUISettings2.appendNode('setting', [name: 'root'])
}

compileGroovy {
    options.compilerArgs = ['-Xlint:deprecation', '-Xlint:unchecked']
}

task sourceJar(type: Jar) {
    description = 'An archive of the source code for Maven Central'
    classifier = 'sources'
    from sourceSets.main.groovy
}

task groovydocJar(type: Jar) {
    description = 'An archive of the GroovyDocs for Maven Central'
    classifier = 'javadoc'
    from groovydoc
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.12'
}

cobertura {
    format = 'html'
    includes = ['**/*.java', '**/*.groovy']
    excludes = ['**/commonJs/**/*.*']
}

artifacts {
    archives groovydocJar, sourceJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            if (plugins.hasPlugin('war')) {
                from components.web
            } else {
                from components.java
            }

            artifact sourceJar {
                classifier 'sources'
            }

            artifact groovydocJar {
                classifier 'javadoc'
            }
        }
    }
}

signing {
    sign configurations.archives
}

bintray {
    user = System.properties['bintrayUsername']
    key = System.properties['bintrayApiKey']
    publications = ['mavenJava']
    pkg {
        repo = 'gradle-plugins'
        name = 'gradle-css-plugin'
        desc = 'Gradle plugin for working with CSS.'
        licenses = ['Apache-2.0']
        labels = ['gradle', 'css']
    }
}

test {
    testLogging {
        stackTraceFilters 'truncate', 'groovy'
        events 'passed', 'skipped', 'failed'
    }
}

// Only *require* signing if we are uploading a non snapshot version
gradle.taskGraph.whenReady { taskGraph ->
    tasks.withType(org.gradle.plugins.signing.Sign).all {
        required = taskGraph.hasTask(":uploadArchives") && !isSnapshot
    }
}

install.repositories.mavenInstaller {
    pom.project(pomConfiguration)
    if (signing.signatory) {
        beforeDeployment { signPom(it) }
    }
}

uploadArchives {
    repositories.mavenDeployer {
        if (signing.signatory) {
            beforeDeployment { signPom(it) }
        }
        name = 'mavenCentralReleaseDeployer'
        repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
            authentication(userName: System.properties['mavenCentralUsername'], password: System.properties['mavenCentralPassword'])
            releases(updatePolicy: 'always')
            snapshots(updatePolicy: 'always')
        }
        pom.project(pomConfiguration)
    }
}

/**
 * Create POM config and return for use by other tasks.
 */
def getPomConfiguration() {
    return {
        name 'Gradle CSS Plugin'
        packaging 'jar'
        description 'A Gradle plugin for working with CSS.'
        url 'https://github.com/eriwen/gradle-css-plugin'
        licenses {
            license {
                name 'The Apache Software License, Version 2.0'
                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                distribution 'repo'
            }
        }
        developers {
            developer {
                id 'eriwen'
                name 'Eric Wendelin'
                email 'me@eriwen.com'
            }
        }
        scm {
            connection 'scm:https://eriwen@github.com/eriwen/gradle-css-plugin'
            developerConnection 'scm:git@github.com:eriwen/gradle-css-plugin.git'
            url 'https://github.com/eriwen/gradle-css-plugin'
        }
    }
}
