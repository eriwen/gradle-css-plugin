apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'idea'

defaultTasks 'clean', 'build'

version = '1.1.2'
group = 'com.eriwen'
ext.artifact = 'gradle-css-plugin'
ext.isSnapshot = version.endsWith("-SNAPSHOT")

repositories {
    mavenCentral()
}

dependencies {
    groovy localGroovy()
    compile gradleApi()
    compile('com.yahoo.platform.yui:yuicompressor:2.4.7') {
        exclude module: 'junit'
    }
    compile 'com.asual.lesscss:lesscss-engine:1.3.0'
    //runtime 'me.n4u.sass:sass-gems:3.1.16'
    testCompile ('org.spockframework:spock-core:0.6-groovy-1.8') {
        exclude module: "junit-dep"
        exclude module: "groovy-all"
    }
}

idea.module {
    ext.gradleCacheVariable = 'GRADLE_CACHE'
    ext.downloadJavadoc = true
    ext.downloadSource = true
    outputDir = file("intellij/out")
    testOutputDir = file("intellij/testOut")
}

idea.project.ipr.withXml { provider ->
    def node = provider.asNode()
    // Use git
    def vcsConfig = node.component.find { it.'@name' == 'VcsDirectoryMappings' }
    vcsConfig.mapping[0].'@vcs' = 'Git'

    // Set gradle home
    def gradleSettings = node.appendNode('component', [name: 'GradleSettings'])
    gradleSettings.appendNode('option', [name: 'SDK_HOME', value: gradle.gradleHomeDir.absolutePath])
}

jar {
    baseName = artifact
}

jar << {
    println System.properties['JAVA_HOME']
}

task sourceJar(type: Jar) {
    description = 'An archive of the source code for Maven Central'
    classifier = 'sources'
    from sourceSets.main.groovy
}

task groovydocJar(type: Jar) {
    description = 'An archive of the GroovyDocs for Maven Central'
    classifier = 'javadoc'
    from groovydoc
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.4'
}

artifacts {
    archives groovydocJar, sourceJar
}

signing {
    sign configurations.archives
}

// Only *require* signing if we are uploading a non snapshot version
gradle.taskGraph.whenReady { taskGraph ->
    tasks.withType(org.gradle.plugins.signing.Sign).all {
        required = taskGraph.hasTask(":uploadArchives") && !isSnapshot
    }
}

install.repositories.mavenInstaller {
    pom.project(pomConfiguration)
    if (signing.signatory) {
        beforeDeployment { signPom(it) }
    }
}

uploadArchives {
    repositories.mavenDeployer {
        if (signing.signatory) {
            beforeDeployment { signPom(it) }
        }
        name = 'mavenCentralReleaseDeployer'
        repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
            authentication(userName: System.properties['mavenCentralUsername'], password: System.properties['mavenCentralPassword'])
            releases(updatePolicy: 'always')
            snapshots(updatePolicy: 'always')
        }
        pom.project(pomConfiguration)
    }
}

/**
 * Create POM config and return for use by other tasks.
 */
def getPomConfiguration() {
    return {
        name 'Gradle CSS Plugin'
        packaging 'jar'
        description 'A Gradle plugin for working with CSS.'
        url 'https://github.com/eriwen/gradle-css-plugin'
        licenses {
            license {
                name 'The Apache Software License, Version 2.0'
                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                distribution 'repo'
            }
        }
        developers {
            developer {
                id 'eriwen'
                name 'Eric Wendelin'
                email 'emwendelin@gmail.com'
            }
        }
        scm {
            connection 'scm:https://eriwen@github.com/eriwen/gradle-css-plugin'
            developerConnection 'scm:git@github.com:eriwen/gradle-css-plugin.git'
            url 'https://github.com/eriwen/gradle-css-plugin'
        }
    }
}

